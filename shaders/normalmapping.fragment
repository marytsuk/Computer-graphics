#version 330 core

in vec2 UV;
in vec3 pos_in_world;
in vec3 eye_cam;
//in vec3 light_cam;
in vec3 light_tangent;
in vec3 eye_tangent;
in vec4 shadow_coord;

out vec4 out_color;

uniform sampler2D DiffuseTexture;
uniform sampler2D NormalTexture;
uniform sampler2DShadow shadow_map;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 light_pos;
uniform float if_fog;

const vec3 fogColor = vec3(0.5, 0.6,0.5);

/*vec2 random_variable[4] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760) 
);*/
vec2 random_variable[4] = vec2[]( 
   vec2(-0.8825786639532112, -1.1591626419325909), 
   vec2(-2.365044021567219, 0.1000489055537053), 
   vec2(-0.04948058346346348, -0.29587510214443763), 
   vec2(1.3147877810496098, 0.7153375522252813) 
);
void main()
{
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 1.0;
	
	vec3 Diffuse = texture(DiffuseTexture, UV ).rgb;
	vec3 Ambient = vec3(0.1, 0.1, 0.1) * Diffuse;
	vec3 Specular = vec3(0.4, 0.4, 0.4);
	//нормаль уникальная для каждого фрагмента
	vec3 TexNormal_tangent = normalize(texture(NormalTexture, vec2(UV.x, UV.y)).rgb * 2.0 - 1.0); //в нормальной текстуре компоненты вектора [-1; 1], преобразовываем в [0, 1]

	vec3 n = TexNormal_tangent;
	vec3 l = normalize(light_tangent);
	float cos_alpha = max(dot(n, l), 0);

	vec3 e = normalize(eye_tangent);
	vec3 r = reflect(-l, n);
	float cos_betta = max(dot(e, r), 0);
	
	float visibility = 1.0;
	float bias = 0.003;
	for (int i = 0; i < 4; i++)
	{
		int index = i;
		visibility -= 0.2 * (1.0 - texture(shadow_map, vec3(shadow_coord.xy + random_variable[index] / 1000.0, (shadow_coord.z - bias) / shadow_coord.w)));
	}

	vec3 color = Ambient +
		visibility * Diffuse * LightColor * LightPower * cos_alpha +
		visibility * Specular * LightColor * LightPower * pow(cos_betta, 16);

	if (if_fog == 1.0)
	{
		vec3 finalColor = vec3(0, 0, 0);
		float dist = 0;
		float fogFactor = 0;
   		dist = length(eye_cam);
		
		fogFactor = 0.4 * (pos_in_world.y - 1.3);
		fogFactor *= fogFactor;
		fogFactor = clamp(exp(-0.4 * fogFactor * dist), 0.0, 1.0);

		if (pos_in_world.y < 1.3)
			finalColor = mix(fogColor, color, fogFactor);
		else
			if (pos_in_world.y > 1.3)
				finalColor = mix(fogColor, color, 1);
		out_color = vec4(finalColor, 1);
	}
	else
		out_color = vec4(color, 1);

}