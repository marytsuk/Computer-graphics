#version 330 core

in vec2 UV;
in vec3 pos_in_world;
in vec3 normal_cam;
in vec3 eye_cam;
in vec3 light_cam;
in vec4 shadow_coord;


out vec4 FragColor;

uniform sampler2DShadow shadow_map;
uniform mat4 MV;
uniform vec3 light_pos;
uniform float if_fog;

const vec3 diffuse = vec3(0.9, 0.2, 0.3); //цвет поверхности
const float metallic = 0.9;
const float roughness = 0.2; //коэффициент шероховатости in (0; 1)(аппроксимация микрограней поверхности)
const float PI = 3.14159265359;

const vec3 fogColor = vec3(0.5, 0.6, 0.5);
float Distribution(vec3 N, vec3 H, float roughness)//ф-я нормального распределения
{
	float a  = roughness * roughness;
    	float NdotH = max(dot(N, H), 0.0);
    	float y = (NdotH * NdotH * (a - 1.0) + 1.0);
    	y = PI * y * y;
	return a / y;
};
float G1(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
    	float k = (r * r) / 8.0;
	float y = NdotV * (1.0 - k) + k;
	return NdotV / y;
};
float Geometry(vec3 N, vec3 V, vec3 L, float roughness)//ф-я геометрии
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float g1 = G1(NdotL, roughness);
    	float g2 = G1(NdotV, roughness);
	return g1 * g2;
};
vec3 Fresnel(float cosTheta, vec3 F0) //ур-е Френеля
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
};
/*vec2 random_variable[4] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760) 
);*/
vec2 random_variable[4] = vec2[]( 
   vec2(-0.8825786639532112, -1.1591626419325909), 
   vec2(-2.365044021567219, 0.1000489055537053), 
   vec2(-0.04948058346346348, -0.29587510214443763), 
   vec2(1.3147877810496098, 0.7153375522252813) 
);
void main()
{
	float visibility = 1.0;
	vec3 LightColor = vec3(1, 1, 1);
	float LightPower = 1.0f;

	vec3 N = normalize(normal_cam);
	vec3 V = normalize(eye_cam);
	vec3 F0 = vec3(0.95, 0.64, 0.54); //базовая отражательная способность
	F0 = mix(F0, diffuse, metallic);
	vec3 Lo = vec3(0.0, 0.0, 0.0);

	vec3 L = normalize(light_cam);

	float bias = 0.003;
	for (int i = 0; i < 4; i++)
	{
		int index = i;
		visibility -= 0.2 * (1.0 - texture(shadow_map, vec3(shadow_coord.xy + random_variable[index] / 1000.0, (shadow_coord.z - bias) / shadow_coord.w)));
	}

	vec3 H = normalize(V + L);
	vec3 radiance = LightColor * LightPower;

	float NDF = Distribution(N, H, roughness);        
        float G = Geometry(N, V, L, roughness);      
        vec3 F = Fresnel(max(dot(H, V), 0.0), F0);
	
	//учет з-на сохранения энергии
	vec3 kS = F; //зеркальная часть
        vec3 kD = vec3(1.0, 1.0, 1.0) - kS; //диффузная часть
        kD *= 1.0 - metallic;	  
        
        float y = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0); //ф-ла Кука - Торренса
        vec3 specular = (NDF * G * F) / max(y, 0.0000000001);  
            
        float NdotL = max(dot(N, L), 0.0);                
       	Lo += (kD * diffuse / PI + specular) * radiance * NdotL; //исходящая энергетическая яркость(из уравнения отражения)
	vec3 ambient = vec3(0.023, 0.023, 0.023) * diffuse;
	
	vec3 color = ambient + visibility * Lo;
    	color = color / (color + vec3(1.0, 1.0, 1.0)); 
    	color = pow(color, vec3(1.0/2.2)); //гамма-коррекция
	
	//FOG
	if (if_fog == 1.0)
	{
		vec3 finalColor = vec3(0, 0, 0);
		float dist = 0;
		float fogFactor = 0;
   		dist = length(eye_cam);
		
		fogFactor = 0.4 * (pos_in_world.y - 1.3);
		fogFactor *= fogFactor;
		fogFactor = clamp(exp(-0.4 * fogFactor * dist), 0.0, 1.0);

		if (pos_in_world.y < 1.3)
			finalColor = mix(fogColor, color, fogFactor);
		else
			if (pos_in_world.y > 1.3)
				finalColor = mix(fogColor, color, 1);
		FragColor = vec4(finalColor, 1);
	}
	else
		FragColor = vec4(color, 1);
}
